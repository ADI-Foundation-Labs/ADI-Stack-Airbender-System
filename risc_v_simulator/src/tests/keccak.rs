use super::*;
use crate::{
    abstractions::memory::{AccessType, MemorySource},
    cycle::status_registers::TrapReason,
    delegations::DelegationsCSRProcessor,
};
use common_constants::delegation_types::keccak_special5::*;
use core::array::from_fn;

#[test]
fn test_keccak() {
    // let binary = OLD_KECCAK_F1600_BIN;
    let binary = lib_rv32_asm::assemble_program(&KECCAK_F1600_ASM.join("\n"))
        .expect("could not assemble program");

    // old simulator
    let mut state_oldisa = RiscV32State::<IMStandardIsaConfig>::initial(INITIAL_PC);
    let mut state_newunrolled =
        RiscV32StateForUnrolledProver::<IMStandardIsaConfig>::initial(INITIAL_PC);

    // feed ROM/RAM + set state address
    let (memory_original, state_addr) = {
        const MEMORY_BYTE_SIZE: usize = 1 << 22;
        const ROM_ENTRY_ADDR: u32 = INITIAL_PC; // seems to be default for simulator
        const RAM_ENTRY_ADDR: u32 = 1 << 21; // seems to be default for simulator
        let mut memory = VectorMemoryImpl::new_for_byte_size(MEMORY_BYTE_SIZE);
        memory.load_image(ROM_ENTRY_ADDR, binary.iter().flat_map(|w| w.to_le_bytes()));
        for i in 0..KECCAK_SPECIAL5_STATE_AND_SCRATCH_U64_WORDS as u32 {
            memory.populate(
                RAM_ENTRY_ADDR + (i * 2) * 4,
                KECCAK_STATE_INPUT[i as usize] as u32,
            );
            memory.populate(
                RAM_ENTRY_ADDR + (i * 2 + 1) * 4,
                (KECCAK_STATE_INPUT[i as usize] >> 32) as u32,
            );
        }
        (memory, RAM_ENTRY_ADDR)
    };

    // TODO TRACER
    // use tracer;
    // let mut tracer = ExecutionFriendlyTracer;
    // let mut tracer = GPUFriendlyTracer;

    // run SIMULATOR
    state_oldisa.observable.registers[11] = state_addr; // this is where binary expects state addr
    state_newunrolled.observable.registers[11] = state_addr; // this is where binary expects state addr
    let mut memory_oldisa = memory_original.clone();
    let mut memory_newunrolled = memory_original;
    for i in 0..binary.len() {
        state_oldisa.cycle(
            &mut memory_oldisa,
            &mut (),
            &mut NoMMU::default(),
            &mut ZeroedSource,
        );
    }
    println!("> done with normal tracer");
    // TODO: shouldn't this be using the struct in unrolled delegations??
    state_newunrolled.run_cycles(
        &mut memory_newunrolled,
        &mut (),
        &mut ZeroedSource,
        &mut DelegationsCSRProcessor,
        binary.len(),
    );
    println!("> done with unrolled tracer");

    // get RAM
    let state_output_oldisa: [u64; KECCAK_SPECIAL5_STATE_AND_SCRATCH_U64_WORDS] = {
        let state_output_u32: [u32; KECCAK_SPECIAL5_STATE_AND_SCRATCH_U64_WORDS * 2] =
            from_fn(|i| {
                memory_oldisa.get(
                    state_addr as u64 + i as u64 * 4,
                    AccessType::MemLoad,
                    &mut TrapReason::NoTrap,
                )
            });
        from_fn(|i| state_output_u32[i * 2] as u64 | (state_output_u32[i * 2 + 1] as u64) << 32)
    };
    let state_output_newunrolled: [u64; KECCAK_SPECIAL5_STATE_AND_SCRATCH_U64_WORDS] = {
        let state_output_u32: [u32; KECCAK_SPECIAL5_STATE_AND_SCRATCH_U64_WORDS * 2] =
            from_fn(|i| {
                memory_newunrolled.get(
                    state_addr as u64 + i as u64 * 4,
                    AccessType::MemLoad,
                    &mut TrapReason::NoTrap,
                )
            });
        from_fn(|i| state_output_u32[i * 2] as u64 | (state_output_u32[i * 2 + 1] as u64) << 32)
    };
    assert_eq!(state_output_oldisa, KECCAK_STATE_OUTPUT);
    assert_eq!(state_output_newunrolled, KECCAK_STATE_OUTPUT);
}

const KECCAK_STATE_INPUT: [u64; 31] = [
    0xF1258F7940E1DDE7,
    0x84D5CCF933C0478A,
    0xD598261EA65AA9EE,
    0xBD1547306F80494D,
    0x8B284E056253D057,
    0xFF97A42D7F8E6FD4,
    0x90FEE5A0A44647C4,
    0x8C5BDA0CD6192E76,
    0xAD30A6F71B19059C,
    0x30935AB7D08FFC64,
    0xEB5AA93F2317D635,
    0xA9A6E6260D712103,
    0x81A57C16DBCF555F,
    0x43B831CD0347C826,
    0x01F22F1A11A5569F,
    0x05E5635A21D9AE61,
    0x64BEFEF28CC970F2,
    0x613670957BC46611,
    0xB87C5A554FD00ECB,
    0x8C3EE88A1CCF32C8,
    0x940C7922AE3A2614,
    0x1841F924A2C509E4,
    0x16F53526E70465C2,
    0x75F644E97F30A13B,
    0xEAF1FF7B5CECA249,
    0,
    0,
    0,
    0,
    0,
    0,
];
const KECCAK_STATE_OUTPUT: [u64; 31] = [
    0x2D5C954DF96ECB3C,
    0x6A332CD07057B56D,
    0x093D8D1270D76B6C,
    0x8A20D9B25569D094,
    0x4F9C4F99E5E7F156,
    0xF957B9A2DA65FB38,
    0x85773DAE1275AF0D,
    0xFAF4F247C3D810F7,
    0x1F1B9EE6F79A8759,
    0xE4FECC0FEE98B425,
    0x68CE61B6B9CE68A1,
    0xDEEA66C4BA8F974F,
    0x33C43D836EAFB1F5,
    0xE00654042719DBD9,
    0x7CF8A9F009831265,
    0xFD5449A6BF174743,
    0x97DDAD33D8994B40,
    0x48EAD5FC5D0BE774,
    0xE3B8C8EE55B7B03C,
    0x91A0226E649E42E9,
    0x900E3129E7BADD7B,
    0x202A9EC5FAA3CCE8,
    0x5B3402464E1C3DB6,
    0x609F4E62A44C1059,
    0x20D06CD26A8FBF5C,
    15104850871724851869,
    9271719542500068512,
    2516715728218367750,
    17560361628436099611,
    2273704821156327310,
    9934613883043573876,
];

// this is the binary with the new abi, without explicit control write cycles
const KECCAK_F1600_ASM: &[&str; 650] = &[
    // expects state ptr to be in x11
    "add	a0, x0, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
    "csrrw	x0, 1995, x0",
];
